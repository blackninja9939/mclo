<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="mclo::basic_string_buffer&lt;char,*&gt;">
    <AlternativeType Name="mclo::basic_string_buffer&lt;char8_t,*&gt;"/>
    <DisplayString>{m_data._Elems,s}</DisplayString>
    <StringView>m_data._Elems,s</StringView>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">m_length</Item>
      <Item Name="[capacity]" ExcludeView="simple">max_string_size</Item>
      <ArrayItems>
        <Size>m_length</Size>
        <ValuePointer>m_data._Elems</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  
  <Type Name="mclo::basic_string_buffer&lt;wchar_t,*&gt;">
    <AlternativeType Name="mclo::basic_string_buffer&lt;unsigned short,*&gt;"/>
    <AlternativeType Name="mclo::basic_string_buffer&lt;char16_t,*&gt;"/>
    <DisplayString>{m_data._Elems,su}</DisplayString>
    <StringView>m_data._Elems,su</StringView>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">m_length</Item>
      <Item Name="[capacity]" ExcludeView="simple">max_string_size</Item>
      <ArrayItems>
        <Size>m_length</Size>
        <ValuePointer>m_data._Elems</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  
  <Type Name="mclo::basic_string_buffer&lt;char32_t,*&gt;">
    <DisplayString>{m_data._Elems,s32}</DisplayString>
    <StringView>m_data._Elems,s32</StringView>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">m_length</Item>
      <Item Name="[capacity]" ExcludeView="simple">max_string_size</Item>
      <ArrayItems>
        <Size>m_length</Size>
        <ValuePointer>m_data._Elems</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  
  <Type Name="mclo::tagged_ptr&lt;*,*&gt;">
    <Intrinsic Name="ptr_bits" Expression="( m_bits &amp; ptr_mask ) >> free_upper_bits"/>
    <Intrinsic Name="tag_bits" Expression="m_bits &amp; tag_mask"/>
    <Intrinsic Name="ptr" Expression="($T1*)ptr_bits()"/>
    <Intrinsic Optional="true" Name="tag" Expression="($T2)tag_bits()"/>
    <SmartPointer Usage="Minimal">ptr()</SmartPointer>
    <DisplayString Condition="m_bits == 0">empty</DisplayString>
    <DisplayString Condition="ptr_bits() != 0 &amp;&amp; tag_bits() == 0">tagged_ptr {*ptr()}</DisplayString>
    <DisplayString Condition="ptr_bits() == 0 &amp;&amp; tag_bits() != 0">tagged_ptr nullptr [tag: {tag()}]</DisplayString>
    <DisplayString Condition="ptr_bits() != 0 &amp;&amp; tag_bits() != 0">tagged_ptr {*ptr()} [tag: {tag()}]</DisplayString>
    <Expand>
      <Item Condition="ptr_bits() != 0" Name="[ptr]">ptr()</Item>
      <Item Condition="tag_bits() != 0" Name="[tag]">tag()</Item>
    </Expand>
  </Type>

  <Type Name="mclo::small_optional_integer&lt;*&gt;">
    <DisplayString Condition="m_value == 0">nullopt</DisplayString>
    <DisplayString Condition="m_value &gt; 0">{m_value - 1}</DisplayString>
    <DisplayString Condition="m_value &lt; 0">{m_value}</DisplayString>
  </Type>

  <Type Name="mclo::bitset&lt;*,*&gt;">
    <DisplayString>{{ size={$T1} }}</DisplayString>
    <Expand>
      <IndexListItems>
        <Size>$T1</Size>
        <ValueNode>(m_container[$i / bits_per_value] &gt;&gt; ($i % bits_per_value)) &amp; 1,d</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="mclo::dynamic_bitset&lt;*&gt;">
    <DisplayString>{{ size={m_size} }}</DisplayString>
    <Expand>
      <IndexListItems>
        <Size>m_size</Size>
        <ValueNode>(m_container[$i / bits_per_value] &gt;&gt; ($i % bits_per_value)) &amp; 1,d</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="mclo::enum_map&lt;*,*,*&gt;">
    <Intrinsic Name="size" Expression="(size_t)$T3"/>
    <DisplayString>{{ size={size()} }}</DisplayString>
    <Expand>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"/>
        <Size>size()</Size>
        <Loop>
          <Item Name="{($T1)i}">m_container[i]</Item>
          <Exec>i++</Exec>
        </Loop>
      </CustomListItems >
    </Expand>
  </Type>
  
  <Type Name="mclo::small_vector_base&lt;*&gt;">
    <Intrinsic Name="get_internal_buffer" Expression="(std::byte*)this + offset"/>
    <Intrinsic Name="is_internal" Expression="m_data == get_internal_buffer()"/>
    <DisplayString Condition="is_internal()">{{ size={m_size} (internal) }}</DisplayString>
    <DisplayString Condition="!is_internal()">{{ size={m_size} (external) }}</DisplayString>
    <Expand>
      <Item Name="[capacity]" ExcludeView="simple">m_capacity</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>($T1*)m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
</AutoVisualizer>
